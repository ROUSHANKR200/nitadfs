6. operation on array


#include <stdio.h>

void display(int arr[], int size) {
    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void insert(int arr[], int size, int element, int position) {
    if (position < 0 || position > size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = size; i > position; i--) {
        arr[i] = arr[i - 1];
    }
    arr[position] = element;
    printf("Element inserted successfully.\n");
}

void delete (int arr[], int size, int position) {
    if (position < 0 || position >= size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = position; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }
    printf("Element deleted successfully.\n");
}

void update(int arr[], int size, int position, int new_value) {
    if (position < 0 || position >= size) {
        printf("Invalid position!\n");
        return;
    }
    arr[position] = new_value;
    printf("Element updated successfully.\n");
}

void search(int arr[], int size, int element) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            printf("Element found at position %d\n", i);
            return;
        }
    }
    printf("Element not found in the array.\n");
}

int main() {
    int arr[100], size, choice, element, position, new_value;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }

    do {
        printf("\nMenu:\n");
        printf("1. Display\n");
        printf("2. Insert\n");
        printf("3. Delete\n");
        printf("4. Update\n");
        printf("5. Search\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            display(arr, size);
            break;

        case 2:
            printf("Enter the element to insert: ");
            scanf("%d", &element);
            printf("Enter the position to insert at (0-based index): ");
            scanf("%d", &position);
            insert(arr, size, element, position);
            size++;  // Increase the size of the array
            break;

        case 3:
            printf("Enter the position to delete (0-based index): ");
            scanf("%d", &position);
            delete (arr, size, position);
            size--;  // Decrease the size of the array
            break;

        case 4:
            printf("Enter the position to update (0-based index): ");
            scanf("%d", &position);
            printf("Enter the new value: ");
            scanf("%d", &new_value);
            update(arr, size, position, new_value);
            break;

        case 5:
            printf("Enter the element to search: ");
            scanf("%d", &element);
            search(arr, size, element);
            break;

        case 6:
            printf("Exiting program.\n");
            break;

        default:
            printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}


---------------------

7. buublesort

#include <stdio.h>

void bubbleSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap the elements if they are in the wrong order
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void display(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int size;
    
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    
    int arr[size];
    
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    
    printf("\nOriginal array:\n");
    display(arr, size);
    
    // Sorting the array using Bubble Sort
    bubbleSort(arr, size);
    
    printf("\nSorted array (ascending order):\n");
    display(arr, size);

    return 0;
}

----------------------
8. Insertion sort

#include <stdio.h>

void insertionSort(int arr[], int size) {
    for (int i = 1; i < size; i++) {
        int key = arr[i];
        int j = i - 1;
        
        // Move elements of arr[0..i-1] that are greater than key
        // to one position ahead of their current position
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void display(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int size;
    
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    
    int arr[size];
    
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    
    printf("\nOriginal array:\n");
    display(arr, size);
    
    // Sorting the array using Insertion Sort
    insertionSort(arr, size);
    
    printf("\nSorted array (ascending order):\n");
    display(arr, size);

    return 0;
}


10.stack 




#include <stdio.h>
#define MAX 100

// Global variables for stack and top
int stack[MAX];
int top = -1;

// Function to push an element into the stack
void push(int value) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
    } else {
        stack[++top] = value;
        printf("Pushed %d onto the stack\n", value);
    }
}

// Function to pop an element from the stack
void pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
    } else {
        printf("Popped %d from the stack\n", stack[top--]);
    }
}

// Function to display the stack elements
void display() {
    if (top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Stack elements are:\n");
        for (int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
    }
}

// Main function
int main() {
    int choice, value;
    while (1) {
        printf("\nStack Operations:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the value to push: ");
                scanf("%d", &value);
                push(value);
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}

-----------------------
11. queue

#include <stdio.h>
#define MAX 100

// Global variables for queue and front/rear
int queue[MAX];
int front = -1, rear = -1;

// Function to enqueue an element into the queue
void enqueue(int value) {
    if (rear == MAX - 1) {
        printf("Queue Overflow\n");
    } else {
        if (front == -1) // Initialize front if the queue was empty
            front = 0;
        queue[++rear] = value;
        printf("Enqueued %d into the queue\n", value);
    }
}

// Function to dequeue an element from the queue
void dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue Underflow\n");
        front = rear = -1; // Reset queue when empty
    } else {
        printf("Dequeued %d from the queue\n", queue[front++]);
    }
}

// Function to display the queue elements
void display() {
    if (front == -1 || front > rear) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements are:\n");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

// Main function
int main() {
    int choice, value;
    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the value to enqueue: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}


